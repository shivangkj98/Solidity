// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

contract lottery{

    address  public manager;
    address payable[] public players;


    constructor(){
         manager = msg.sender;
    }

    
     function alreadyentered() view private returns(bool){
     for(uint i=0; i<players.length;i++){
         if(players[i]==msg.sender)
         return true;
     }
         return false;

     }
    
    
    function enter() payable public{
        require(msg.sender != manager, " manager can't particpate");
        require(alreadyentered() == false,"Player has already entered");
        require(msg.value > 1 ether, "Minimum threshold required to participate is 1 eth ");
        players.push(payable(msg.sender));
    }

    function random() view public returns(uint){
        return uint(sha256(abi.encodePacked(block.difficulty,block.number,players)));
    }

    function pickwinner() public {
        require(msg.sender == manager," Only manager can pick the winners");
        uint num = random()%players.length;
        require (players.length >= 3,"BRING MORE PEOPLE");
        players[num].transfer(getBalance());
        players = new address payable[](0);
         }
        
    
    function getplayers() view public returns (address payable[] memory){
        return players;

    }

     function getBalance() public view returns(uint){
        require(msg.sender == manager);
        return address(this).balance;
    }

}
